@page "/ScanDetails/{ScanId:int}"
@using System.Globalization
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@using LintingResults.Data
@using Microsoft.EntityFrameworkCore
@using LintingResults.Components.Controls
@rendermode InteractiveServer
@inject IDbContextFactory<LintingDbContext> ContextFactory
<h1>ScanDetails</h1>

    
@if (result != null)
{
    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel>Scan on @result.dateInserted</FluentLabel>
            @if (baseUrlForWACS != null)
            {
                <FluentButton OnClick="ViewOnWACS" Appearance="Appearance.Accent">View on WACS</FluentButton>
            }
        </FluentStack>
        <FluentSelect Label="Select a book" TOption="KeyValuePair<string, Dictionary<string, List<LintingResultItem>>>" Items="result.LintingItems"
                      OptionValue="i => i.Key" OptionText="i => i.Key" @bind-SelectedOption="selectedItem"/>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentStack Orientation="Orientation.Vertical">
                @if (selectedItem is { Key: not null, Value: not null })
                {
                    @foreach (var (chapter, verses) in selectedItem.Value)
                    {
                        var issues = verses.Where(i => SelectedCodes.Contains(i.errorId)).ToList();
                        if (issues.Count == 0)
                        {
                            continue;
                        }

                        if (chapter == "Unknown")
                        {
                            if (selectedItem.Key == "Unknown")
                            {
                                <h3>Miscellaneous things </h3>
                            }
                            else
                            {
                                <h3>Book level or unknown chapter</h3>
                            }
                        }
                        else
                        {
                            <h3>@chapter</h3>
                        }

                        <ul>
                            @foreach (var issue in issues)
                            {
                                <li>
                                    @if (issue.verse == "Unknown")
                                    {
                                        <div>(@issue.errorId) @issue.message</div>
                                    }
                                    else
                                    {
                                        <div>Verse @issue.verse (@issue.errorId) @issue.message</div>
                                    }
                                </li>
                            }
                        </ul>
                    }
                }
            </FluentStack>
            <ErrorCodeFilter CodesAndLabels="ErrorCodes" @bind-SelectedCodes="SelectedCodes"/>
        </FluentStack>
    </FluentStack>
}
else
{
    <p>Scan not found, you probably have a broken link</p>
}

@code {
    private KeyValuePair<string,Dictionary<string, List<LintingResultItem>>> selectedItem = new();
    
   [Parameter] 
    public int ScanId { get; set; }
    
    LintingResultDBModel? result;

    private List<(string,string)> ErrorCodes = new ();
    private HashSet<string> SelectedCodes = [];
    private string? baseUrlForWACS;
    private string Repo { get; set; }
    private string User { get; set; }

    protected override void OnInitialized()
    {
        using var context = ContextFactory.CreateDbContext();
        result = context.LintingResults.FirstOrDefault(i => i.LintingResultDBModelId == ScanId);
        if (result == null)
        {
            return;
        }
        result.LintingItems = result.LintingItems.OrderBy(i => bibleBookAbbreviations.IndexOf(i.Key)).ToDictionary(i => i.Key, i => i.Value);
        var addedErrors = new HashSet<string>();
        foreach (var book in result.LintingItems)
        {
            if (selectedItem.Key == null)
            {
                selectedItem = book;
            }
            foreach (var chapter in book.Value)
            {
                foreach (var verse in chapter.Value)
                {
                    if (addedErrors.Contains(verse.errorId))
                    {
                        continue;
                    }
                    ErrorCodes.Add((verse.errorId, verse.errorId));
                    addedErrors.Add(verse.errorId);
                }
            }
        }

        var repo = context.Repos.FirstOrDefault(i => i.RepoId == result.RepoId);
        User = repo.User;
        Repo = repo.RepoName;
        baseUrlForWACS = Configuration["WACSUrl"] ?? null;
        if (baseUrlForWACS == null)
        {
            return;
        }
        if (!baseUrlForWACS.EndsWith("/"))
        {
            baseUrlForWACS += "/";
        }
            
    }


    List<string> bibleBookAbbreviations = new List<string>
    {
    // Old Testament
    "GEN", "EXO", "LEV", "NUM", "DEU", "JOS", "JDG", "RUT", "1SA", "2SA",
    "1KI", "2KI", "1CH", "2CH", "EZR", "NEH", "EST", "JOB", "PSA", "PRO",
    "ECC", "SNG", "ISA", "JER", "LAM", "EZK", "DAN", "HOS", "JOL", "AMO",
    "OBA", "JON", "MIC", "NAM", "HAB", "ZEP", "HAG", "ZEC", "MAL",

    // New Testament
    "MAT", "MRK", "LUK", "JHN", "ACT", "ROM", "1CO", "2CO", "GAL", "EPH",
    "PHP", "COL", "1TH", "2TH", "1TI", "2TI", "TIT", "PHM", "HEB",
    "JAS", "1PE", "2PE", "1JN", "2JN", "3JN", "JUD", "REV"
    };

    private void ViewOnWACS()
    {
    JSRuntime.InvokeVoidAsync("open", baseUrlForWACS + User + "/" + Repo);
    }



}