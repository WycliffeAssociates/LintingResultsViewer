@page "/ScanDetails/{ScanId:int}"
@inject IErrorDescriptionSource ErrorDescriptionSource
@inject IConfiguration Configuration
@using LintingResults.Data
@using LintingResults.Components.Controls
@using Microsoft.EntityFrameworkCore
@using LintingResults.Services
@rendermode InteractiveServer
@inject IDbContextFactory<LintingDbContext> ContextFactory
<h1>Details for scan on @result.dateInserted</h1>

    
@if (result != null)
{
    <FluentToolbar Style="width: 100%">
        <FluentSelect Disabled="ShowAll" Label="Select a book" TOption="KeyValuePair<string, Dictionary<string, List<LintingResultItem>>>" Items="result.LintingItems"
                      OptionValue="i => i.Key" OptionText="i => i.Key" @bind-SelectedOption="selectedItem"/>
        <FluentSwitch @bind-Value="ShowAll" Label="Show All"/>
        @if (baseUrlForWACS != null)
        {
            <FluentAnchor slot="end" Href="@($"{baseUrlForWACS}{User}/{Repo}")" Appearance="Appearance.Accent" Target="_blank">View on WACS</FluentAnchor>
        }
    </FluentToolbar>
    <div class="details-container">
        <article class="details-main-content">
            <FluentStack Orientation="Orientation.Vertical">
                @if (!ShowAll)
                {
                    @if (selectedItem is { Key: not null, Value: not null })
                    {
                    <IssueList Book="selectedItem" SelectedCodes="SelectedCodes"/>
                    }
                }
                else
                {
                    foreach (var book in result.LintingItems)
                    {
                        <h2>@book.Key</h2>
                        <IssueList Book="book" SelectedCodes="SelectedCodes"/>
                    }
                }
            </FluentStack>
        </article>
        <aside class="details-filter">
            <ErrorCodeFilter CodesAndLabels="ErrorCodes" @bind-SelectedCodes="SelectedCodes"/>
        </aside>
    </div>
}
else
{
    <p>Scan not found, you probably have a broken link</p>
}

@code {
    private KeyValuePair<string,Dictionary<string, List<LintingResultItem>>> selectedItem = new();
    
   [Parameter] 
    public int ScanId { get; set; }
    
    LintingResultDBModel? result;

    private List<(string,string)> ErrorCodes = new ();
    private HashSet<string> SelectedCodes = [];
    private string? baseUrlForWACS;
    private string Repo { get; set; }
    private string User { get; set; }
    private bool ShowAll { get; set; }

    protected override void OnInitialized()
    {
        using var context = ContextFactory.CreateDbContext();
        result = context.LintingResults.FirstOrDefault(i => i.LintingResultDBModelId == ScanId);
        if (result == null)
        {
            return;
        }
        result.LintingItems = result.LintingItems.OrderBy(i => bibleBookAbbreviations.IndexOf(i.Key)).ToDictionary(i => i.Key, i => i.Value);
        var addedErrors = new HashSet<string>();

        var errorCodes = ErrorDescriptionSource.GetErrorDescriptions();
        
        foreach (var book in result.LintingItems)
        {
            if (selectedItem.Key == null)
            {
                selectedItem = book;
            }
            foreach (var chapter in book.Value)
            {
                foreach (var verse in chapter.Value)
                {
                    if (addedErrors.Contains(verse.errorId))
                    {
                        continue;
                    }
                    ErrorCodes.Add((verse.errorId,errorCodes.GetValueOrDefault(verse.errorId, verse.errorId)));
                    addedErrors.Add(verse.errorId);
                }
            }
        }

        var repo = context.Repos.FirstOrDefault(i => i.RepoId == result.RepoId);
        User = repo.User;
        Repo = repo.RepoName;
        baseUrlForWACS = Configuration["WACSUrl"] ?? null;
        if (baseUrlForWACS == null)
        {
            return;
        }
        if (!baseUrlForWACS.EndsWith("/"))
        {
            baseUrlForWACS += "/";
        }
            
    }


    List<string> bibleBookAbbreviations = new List<string>
    {
    // Old Testament
    "GEN", "EXO", "LEV", "NUM", "DEU", "JOS", "JDG", "RUT", "1SA", "2SA",
    "1KI", "2KI", "1CH", "2CH", "EZR", "NEH", "EST", "JOB", "PSA", "PRO",
    "ECC", "SNG", "ISA", "JER", "LAM", "EZK", "DAN", "HOS", "JOL", "AMO",
    "OBA", "JON", "MIC", "NAM", "HAB", "ZEP", "HAG", "ZEC", "MAL",

    // New Testament
    "MAT", "MRK", "LUK", "JHN", "ACT", "ROM", "1CO", "2CO", "GAL", "EPH",
    "PHP", "COL", "1TH", "2TH", "1TI", "2TI", "TIT", "PHM", "HEB",
    "JAS", "1PE", "2PE", "1JN", "2JN", "3JN", "JUD", "REV"
    };
}